#!/usr/bin/env bash

absolute_path() {
    # if the given path to the kscript launcher is absolute (i.e. it is either starting with / or a
    # 'letter:/' when using gitbash on windows) it is returned unchanged, otherwise we construct an absolute path
    [[ $1 = /* ]] || [[ $1 =~ ^[A-z]:/ ]] && echo "$1" || echo "$PWD/${1#./}"
}

resolve_symlink() (
    if [[ $OSTYPE != darwin* ]]; then minusFarg="-f"; fi
    sym_resolved=$(readlink ${minusFarg} $1)

    if [[ -n $sym_resolved ]]; then
        echo $sym_resolved
    else
        echo $1
    fi
)

ABS_KSCRIPT_PATH=$(resolve_symlink $(absolute_path $0))

JAR_PATH=$(dirname $(dirname "$ABS_KSCRIPT_PATH"))/lib

# OSTYPE can be: linux*, freebsd, darwin*, cygwin, msys
if [[ "$OSTYPE" == "cygwin" || "$OSTYPE" == "msys" ]]; then
  JAR_PATH=$(cygpath -w "${JAR_PATH}")
  true
fi

## expose the name of the script being run to the script itself
export KSCRIPT_FILE="$1"

## run it using command substitution to have just the user process once kscript is done
COMMAND=$("java" -classpath "$JAR_PATH/*" kscript.app.KscriptKt "$OSTYPE" "$@")
RESULT=$?

if [ ! $RESULT -eq 0 ]; then
    exit $RESULT
fi

if [ -n "$COMMAND" ]; then
    eval "exec $COMMAND"
fi
